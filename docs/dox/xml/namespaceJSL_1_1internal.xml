<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceJSL_1_1internal" kind="namespace" language="C++">
    <compoundname>JSL::internal</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceJSL_1_1internal_1a7d30ff3799fac0a4594525b50b8c5ba6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">void</ref></type>
        <definition>void JSL::internal::variadicVectorPrint</definition>
        <argsstring>(std::fstream &amp;os, const std::string &amp;delimiter, int i, const std::vector&lt; T &gt; &amp;first, const std::vector&lt; Ts &gt; &amp;... args)</argsstring>
        <name>variadicVectorPrint</name>
        <qualifiedname>JSL::internal::variadicVectorPrint</qualifiedname>
        <param>
          <type>std::fstream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">Ts</ref> &gt; &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a helper function for writeMultiVectorToFile, and performs the recursive looping over the variadic vector templates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/FileIO/fileWriter.h" line="69" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/FileIO/fileWriter.h" bodystart="69" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1_1internal_1acf34245ed74263da6fd864feaed681ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">bool</ref></type>
        <definition>bool JSL::internal::variadicLengthEquality</definition>
        <argsstring>(size_t length, const std::vector&lt; T &gt; &amp;first, const std::vector&lt; Ts &gt; &amp;...args)</argsstring>
        <name>variadicLengthEquality</name>
        <qualifiedname>JSL::internal::variadicLengthEquality</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">size_t</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">T</ref> &gt; &amp;</type>
          <declname>first</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">Ts</ref> &gt; &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/FileIO/fileWriter.h" line="84" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/FileIO/fileWriter.h" bodystart="84" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1_1internal_1ad9e3cb9332be17eb5344432eb2a58570" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::internal::signifier</definition>
        <argsstring>(const double &amp;x, int significance)</argsstring>
        <name>signifier</name>
        <qualifiedname>JSL::internal::signifier</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>significance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/gnuplot/axis.h" line="29" column="20" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/gnuplot/axis.h" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1_1internal_1ae5d5175406e607b000d8a7e719e7dd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">bool</ref></type>
        <definition>bool JSL::internal::variadicAssertion</definition>
        <argsstring>(bool first, Ts... args)</argsstring>
        <name>variadicAssertion</name>
        <qualifiedname>JSL::internal::variadicAssertion</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">bool</ref></type>
          <declname>first</declname>
        </param>
        <param>
          <type>Ts...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/System/assert.h" line="13" column="6" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/System/assert.h" bodystart="13" bodyend="23"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/FileIO/fileWriter.h" line="63" column="1"/>
  </compounddef>
</doxygen>
