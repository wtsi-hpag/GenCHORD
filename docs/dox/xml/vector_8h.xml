<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="vector_8h" kind="file" language="C++">
    <compoundname>vector.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">math.h</includes>
    <includes local="no">ostream</includes>
    <includes local="no">sstream</includes>
    <includes refid="System_8h" local="yes">../System/System.h</includes>
    <includedby refid="Maths_8h" local="yes">/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/Maths.h</includedby>
    <includedby refid="matrix_8h" local="yes">/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h</includedby>
    <incdepgraph>
      <node id="14">
        <label>../FileIO/locationExists.h</label>
        <link refid="locationExists_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>../System/System.h</label>
        <link refid="System_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>assert.h</label>
        <link refid="assert_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>error.h</label>
        <link refid="error_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>readPipe.h</label>
        <link refid="readPipe_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rm.h</label>
        <link refid="rm_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>systemCall.h</label>
        <link refid="systemCall_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>dirent.h</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>math.h</label>
      </node>
      <node id="8">
        <label>ostream</label>
      </node>
      <node id="9">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="15">
        <label>sys/stat.h</label>
      </node>
      <node id="20">
        <label>unistd.h</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/Users/jf20/Documents/Genomics/Deforest/libs/JSL/JSL.h</label>
        <link refid="JSL_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/Maths.h</label>
        <link refid="Maths_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h</label>
        <link refid="matrix_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Testing/Testing.h</label>
        <link refid="Testing_8h"/>
      </node>
      <node id="4">
        <label>/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Testing/Testing_UnitTests.h</label>
        <link refid="Testing__UnitTests_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/Distributor.h</label>
        <link refid="Distributor_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/HarmonicFunctions.h</label>
        <link refid="HarmonicFunctions_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/NegativeBinomial.h</label>
        <link refid="NegativeBinomial_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/Transitions.h</label>
        <link refid="Transitions_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/data.h</label>
        <link refid="data_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/harmonicFit.h</label>
        <link refid="harmonicFit_8h"/>
      </node>
      <node id="12">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/plotting.h</label>
        <link refid="plotting_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/Users/jf20/Documents/Genomics/Deforest/src/settings.h</label>
        <link refid="settings_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classJSL_1_1Vector" prot="public">JSL::Vector</innerclass>
    <innernamespace refid="namespaceJSL">JSL</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../System/System.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceJSL" kindref="compound">JSL</ref></highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Forward<sp/>declarations<sp/>to<sp/>make<sp/>some<sp/>of<sp/>the<sp/>weird<sp/>circular<sp/>stuff<sp/>work<sp/>--&gt;<sp/>these<sp/>are<sp/>defined<sp/>in<sp/>full<sp/>later!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Vector;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" kindref="member">VectorDotProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Vector<sp/><ref refid="namespaceJSL_1aa7816eb0cd81b74241ce460237990e70" kindref="member">VectorCrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1a09355c91f84fd99d4634bf9189fef51d" kindref="member">AngleBetweenVectors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector<sp/>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="22" refid="classJSL_1_1Vector" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26" refid="classJSL_1_1Vector_1a840fca607f8eae7dea1494b2954d3a3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector_1a840fca607f8eae7dea1494b2954d3a3c" kindref="member">Vector</ref>():<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>(0)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref><sp/>=<sp/>std::vector&lt;double&gt;(0.0,0.0);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="32" refid="classJSL_1_1Vector_1aea8654ed3fb875d43f669a5f2e26fb25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector_1aea8654ed3fb875d43f669a5f2e26fb25" kindref="member">Vector</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">n</ref>):<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">n</ref>)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref><sp/>=<sp/>std::vector&lt;double&gt;(<ref refid="structJSL_1_1NameValuePair" kindref="compound">n</ref>,0.0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38" refid="classJSL_1_1Vector_1af5be93b29e1c2aab2882827d5001a2aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector_1af5be93b29e1c2aab2882827d5001a2aa" kindref="member">Vector</ref>(std::vector&lt;double&gt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>):<sp/><ref refid="structData" kindref="compound">Data</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>),<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.<ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>())</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43" refid="classJSL_1_1Vector_1a7b07c27a73798d08b3a6271318f112c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector_1a7b07c27a73798d08b3a6271318f112c0" kindref="member">Vector</ref>(std::vector&lt;int&gt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>):<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.<ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>())</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref><sp/>=<sp/>std::vector&lt;double&gt;(<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.begin(),<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.end());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47" refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="48"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classJSL_1_1Vector_1afb4b68acfc19f52b5cb7514a743ccc87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1afb4b68acfc19f52b5cb7514a743ccc87" kindref="member">Min</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="53"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::min_element(<ref refid="structData" kindref="compound">Data</ref>.begin(),<ref refid="structData" kindref="compound">Data</ref>.end());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56" refid="classJSL_1_1Vector_1a82f2385c1edd3fb0dafd577e32318255" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a82f2385c1edd3fb0dafd577e32318255" kindref="member">Max</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="57"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::max_element(<ref refid="structData" kindref="compound">Data</ref>.begin(),<ref refid="structData" kindref="compound">Data</ref>.end());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61" refid="classJSL_1_1Vector_1afc97ae2f771605f0cc32456542a2f0d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="classJSL_1_1Vector_1afc97ae2f771605f0cc32456542a2f0d5" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">idx &lt; nElements &amp;&amp; idx &gt;</ref>=<sp/>0)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structData" kindref="compound">Data</ref>[idx];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<ref refid="classJSL_1_1Vector_1ac41d3cb075c2bd871c31b96dedba08fe" kindref="member">negativeIntegerError</ref>(idx));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<ref refid="classJSL_1_1Vector_1ab081a68e1fc526f4bf866de0ba61a09b" kindref="member">outOfBoundsError</ref>(idx));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="classJSL_1_1Vector_1a57b871b70f9b894b0e5c302d1f9b71ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classJSL_1_1Vector_1a57b871b70f9b894b0e5c302d1f9b71ad" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="82"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">idx &lt; nElements &amp;&amp; idx &gt;</ref>=<sp/>0)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structData" kindref="compound">Data</ref>[idx];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<ref refid="classJSL_1_1Vector_1ac41d3cb075c2bd871c31b96dedba08fe" kindref="member">negativeIntegerError</ref>(idx));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<ref refid="classJSL_1_1Vector_1ab081a68e1fc526f4bf866de0ba61a09b" kindref="member">outOfBoundsError</ref>(idx));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101" refid="classJSL_1_1Vector_1a60660b5a26e0ddace46f31699834b671" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a60660b5a26e0ddace46f31699834b671" kindref="member">Dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="102"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" kindref="member">VectorDotProduct</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107" refid="classJSL_1_1Vector_1a59ff98a99ebcf2b589290b9e57b8e184" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classJSL_1_1Vector_1a59ff98a99ebcf2b589290b9e57b8e184" kindref="member">Cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="108"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1aa7816eb0cd81b74241ce460237990e70" kindref="member">VectorCrossProduct</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113" refid="classJSL_1_1Vector_1ac1346e26bc981bf45d2c1c4317dac4e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1ac1346e26bc981bf45d2c1c4317dac4e6" kindref="member">SqNorm</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="114"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" kindref="member">VectorDotProduct</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118" refid="classJSL_1_1Vector_1a3d758f7808e2aaeb21a123661b10a899" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/><ref refid="classJSL_1_1Vector_1a3d758f7808e2aaeb21a123661b10a899" kindref="member">PointwiseDivide</ref>(<ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">dividor</ref>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceJSL_1a1a7afe30fd764dc4151982a2631f08d3" kindref="member">JSL::Assert</ref>(</highlight><highlight class="stringliteral">&quot;Can<sp/>only<sp/>pointwise<sp/>divide<sp/>vectors<sp/>of<sp/>the<sp/>same<sp/>size&quot;</highlight><highlight class="normal">,<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>()<sp/>==<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">dividor</ref>.Size());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]/=<ref refid="structJSL_1_1NameValuePair" kindref="compound">dividor</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classJSL_1_1Vector_1afa9b72648ed64547eefdc1dca2f8e038" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1afa9b72648ed64547eefdc1dca2f8e038" kindref="member">Sum</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="131"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">s</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/><sp/>=0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">s</ref><sp/>+=<sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">s</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140" refid="classJSL_1_1Vector_1aa8af717591f5548ff471b6e4b28d7f9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1aa8af717591f5548ff471b6e4b28d7f9c" kindref="member">Norm</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="141"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">sqrt</ref>(<ref refid="classJSL_1_1Vector_1ac1346e26bc981bf45d2c1c4317dac4e6" kindref="member">SqNorm</ref>());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146" refid="classJSL_1_1Vector_1a0529640bc02ce994026184d93f43f9c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a0529640bc02ce994026184d93f43f9c3" kindref="member">AngleBetween</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="147"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1a09355c91f84fd99d4634bf9189fef51d" kindref="member">AngleBetweenVectors</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152" refid="classJSL_1_1Vector_1a73579b4a194cc924341806a5d9ea3817" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classJSL_1_1Vector_1a73579b4a194cc924341806a5d9ea3817" kindref="member">to_string</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="153"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classJSL_1_1Vector_1ad2d0bfdb432809a88a49f4576b0afb5a" kindref="member">to_simple_string</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156" refid="classJSL_1_1Vector_1ad2d0bfdb432809a88a49f4576b0afb5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classJSL_1_1Vector_1ad2d0bfdb432809a88a49f4576b0afb5a" kindref="member">to_simple_string</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="157"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">outString</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">outString</ref><sp/>+=<sp/>std::to_string(<ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref><sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">outString</ref><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">outString</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169" refid="classJSL_1_1Vector_1a91d4cf29c2865069520d03292844d84f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classJSL_1_1Vector_1a91d4cf29c2865069520d03292844d84f" kindref="member">to_string_precision</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">n</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="170"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>.precision(<ref refid="structJSL_1_1NameValuePair" kindref="compound">n</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref><sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref><sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>.str();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185" refid="classJSL_1_1Vector_1a41023e6371572e76196b44553b48215c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="186"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1aec102ab8391080ddaedeb4605ef40c5c" kindref="member">Data</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="190" refid="classJSL_1_1Vector_1a284efd325068f5c75fd8d627325f01b3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="191"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;(<ref refid="structData" kindref="compound">Data</ref>.begin(),<ref refid="structData" kindref="compound">Data</ref>.end());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classJSL_1_1Vector_1ab0c81c187542077c13839a07cfc77d89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="classJSL_1_1Vector_1ab0c81c187542077c13839a07cfc77d89" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref><sp/>!=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size())</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>vectors<sp/>of<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>+=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209" refid="classJSL_1_1Vector_1a492901b0924e8055144af4c5e5b99ebf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="classJSL_1_1Vector_1a492901b0924e8055144af4c5e5b99ebf" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref><sp/>!=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size())</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>add<sp/>vectors<sp/>of<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>-=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223" refid="classJSL_1_1Vector_1a56d1795d754957311d22303c397174c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="classJSL_1_1Vector_1a56d1795d754957311d22303c397174c1" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>+=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233" refid="classJSL_1_1Vector_1a953e5c39a0036ed7507a64c1810b65e6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="classJSL_1_1Vector_1a953e5c39a0036ed7507a64c1810b65e6" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>-=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243" refid="classJSL_1_1Vector_1a3d7bee6bfd0624c8bebf63a1c7c3309b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="classJSL_1_1Vector_1a3d7bee6bfd0624c8bebf63a1c7c3309b" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>*=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253" refid="classJSL_1_1Vector_1acc5dec41ebc9cfc77a2b4be5eab07392" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="classJSL_1_1Vector_1acc5dec41ebc9cfc77a2b4be5eab07392" kindref="member">operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>/=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263" refid="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" kindref="member">isnan</ref>()</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" kindref="member">isnan</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" kindref="member">isnan</ref><sp/>=<sp/><ref refid="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" kindref="member">isnan</ref><sp/>||<sp/>std::isnan(<ref refid="structData" kindref="compound">Data</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" kindref="member">isnan</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="classJSL_1_1Vector_1a89f7ded3248861aa9ba4b715ef5eab6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classJSL_1_1Vector_1a89f7ded3248861aa9ba4b715ef5eab6b" kindref="member">zeros</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a840fca607f8eae7dea1494b2954d3a3c" kindref="member">Vector</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>);<sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277" refid="classJSL_1_1Vector_1abc4fbd2797c05d7bba859e5a8c435711" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classJSL_1_1Vector_1abc4fbd2797c05d7bba859e5a8c435711" kindref="member">RandVec</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lowerBound</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">upperBound</ref>)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">r</ref><sp/>=<sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref>)<ref refid="structJSL_1_1NameValuePair" kindref="compound">rand</ref>()/<ref refid="structJSL_1_1NameValuePair" kindref="compound">RAND_MAX</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lowerBound</ref><sp/>+<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">r</ref>*(<ref refid="structJSL_1_1NameValuePair" kindref="compound">upperBound</ref><sp/>-<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lowerBound</ref>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="classJSL_1_1Vector_1a46fc3e1d5ee9bdb66844aa5e2e5112e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classJSL_1_1Vector_1a46fc3e1d5ee9bdb66844aa5e2e5112e9" kindref="member">linspace</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">length</ref>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">length</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assert(&quot;Endpoint<sp/>of<sp/>linspace<sp/>must<sp/>be<sp/>after<sp/>start<sp/>point&quot;,<sp/>end<sp/>&gt;<sp/>start<sp/>&amp;&amp;<sp/>length<sp/>&gt;<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">delta</ref><sp/>=<sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref><sp/>-<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>)/(<ref refid="structJSL_1_1NameValuePair" kindref="compound">length</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">length</ref><sp/>-<sp/>1;<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref><sp/>+<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>*<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">delta</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">length</ref>-1]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302" refid="classJSL_1_1Vector_1a4ca666ae14cef413dcf3679a10a7fbb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classJSL_1_1Vector_1a4ca666ae14cef413dcf3679a10a7fbb9" kindref="member">intspace</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">step</ref>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceJSL_1a1a7afe30fd764dc4151982a2631f08d3" kindref="member">Assert</ref>(</highlight><highlight class="stringliteral">&quot;Endpoint<sp/>of<sp/>intspace<sp/>must<sp/>be<sp/>after<sp/>start<sp/>point&quot;</highlight><highlight class="normal">,<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref><sp/>&gt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">length</ref><sp/>=<sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref><sp/>-<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>)/<ref refid="structJSL_1_1NameValuePair" kindref="compound">step</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">length</ref>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">p</ref>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">p</ref><sp/>&lt;=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">p</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">p</ref>+=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">step</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317" refid="classJSL_1_1Vector_1abf5562ae67edb5273b8dc5b419956825" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="classJSL_1_1Vector_1abf5562ae67edb5273b8dc5b419956825" kindref="member">logintspace</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceJSL_1a1a7afe30fd764dc4151982a2631f08d3" kindref="member">Assert</ref>(</highlight><highlight class="stringliteral">&quot;Endpoint<sp/>of<sp/>intspace<sp/>must<sp/>be<sp/>after<sp/>start<sp/>point&quot;</highlight><highlight class="normal">,<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref><sp/>&gt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">coords</ref><sp/>=<sp/>{<ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>};</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">factor</ref><sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">pow</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>/<ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>,1.0/(<ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref><sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">x</ref><sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">start</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">x</ref>&lt;(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>/<ref refid="structJSL_1_1NameValuePair" kindref="compound">factor</ref>)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">x</ref><sp/>=<sp/>std::max(<ref refid="structJSL_1_1NameValuePair" kindref="compound">x</ref>+1,(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="structJSL_1_1NameValuePair" kindref="compound">round</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">factor</ref><sp/>*<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">x</ref>));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">coords</ref>.push_back(<ref refid="structJSL_1_1NameValuePair" kindref="compound">x</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">coords</ref>.size()<sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">coords</ref>.push_back(<ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">coords</ref>.resize(<ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">coords</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">size</ref><sp/>-<sp/>1]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">end</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a840fca607f8eae7dea1494b2954d3a3c" kindref="member">Vector</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">coords</ref>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="340" refid="classJSL_1_1Vector_1aec102ab8391080ddaedeb4605ef40c5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classJSL_1_1Vector_1aec102ab8391080ddaedeb4605ef40c5c" kindref="member">Data</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342" refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>;</highlight></codeline>
<codeline lineno="343" refid="classJSL_1_1Vector_1ac41d3cb075c2bd871c31b96dedba08fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1ac41d3cb075c2bd871c31b96dedba08fe" kindref="member">negativeIntegerError</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="344"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;JSL::Vector<sp/>Error:<sp/>Cannot<sp/>access<sp/>negative<sp/>indices<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(idx)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347" refid="classJSL_1_1Vector_1ab081a68e1fc526f4bf866de0ba61a09b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector_1ab081a68e1fc526f4bf866de0ba61a09b" kindref="member">outOfBoundsError</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="348"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;JSL::Vector<sp/>Error:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(idx)<sp/>+</highlight><highlight class="stringliteral">&quot;<sp/>exceeds<sp/>the<sp/>length<sp/>of<sp/>this<sp/>vector<sp/>(&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<ref refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" kindref="member">nElements</ref>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;).&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Overloaded<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355" refid="namespaceJSL_1a7fad54be308ccb76f68933d91c3c542f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1a682c8bb3fff54370f38dcb16794fc7c5" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Size()<sp/>!=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size())</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Size();++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>!=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>])</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="372" refid="namespaceJSL_1a394a4f9cee0747c76d1190b0365c7b5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1a8b19814a4b6cb667d1e27133acc38513" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref><sp/>==<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="namespaceJSL_1ae6530b77174d0dfae8e0d6e2a810f672" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1ad1bcc74167579ecff71209bf8c9c47a3" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size()<sp/>!=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Size())</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;JSL::Vector<sp/>Error:<sp/>Cannot<sp/>peform<sp/>+<sp/>operation<sp/>on<sp/>vectors<sp/>of<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>+=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="394" refid="namespaceJSL_1a1d8393f2865dc23e7975ad041e341ba5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a4f1a2a224c7f6a8c57627b03594cd89f" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size()<sp/>!=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Size())</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;JSL::Vector<sp/>Error:<sp/>Cannot<sp/>peform<sp/>-<sp/>operation<sp/>on<sp/>vectors<sp/>of<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>-=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="namespaceJSL_1a4b293e2ac3df51113e80022cb3c2ac99" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1ad1bcc74167579ecff71209bf8c9c47a3" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>+=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="424" refid="namespaceJSL_1ac5ceabb8b9e657c5e2d0faf9b20a36e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1ad1bcc74167579ecff71209bf8c9c47a3" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref><sp/>+<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429" refid="namespaceJSL_1ac6bd9311dd73aa6227d826bdb94e748d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a4f1a2a224c7f6a8c57627b03594cd89f" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref><sp/>+<sp/>-1*<ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="435" refid="namespaceJSL_1ab3d17c5cc03a2048e8637d2054fbc138" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a4f1a2a224c7f6a8c57627b03594cd89f" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//To<sp/>do<sp/>it<sp/>the<sp/>`clever&apos;<sp/>way<sp/>would<sp/>be<sp/>to<sp/>redirect<sp/>this<sp/>to<sp/>return<sp/>scalar<sp/>+<sp/>-1*rhs,<sp/>but<sp/>this<sp/>would<sp/>involve<sp/>two<sp/>separate<sp/>loops<sp/>over<sp/>the<sp/>array.<sp/>Annoyingly,<sp/>turns<sp/>out<sp/>to<sp/>be<sp/>better<sp/>to<sp/>just<sp/>copy<sp/>the<sp/>loop<sp/>code<sp/>and<sp/>do<sp/>it<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output(<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size());</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref><sp/>-<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="448" refid="namespaceJSL_1ab4eefbed468f275164855895335b8a29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a95d670e99aed43f857d8ba5e6f3d7897" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>*=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="459" refid="namespaceJSL_1afc5e092de4a9bdc5795d40ee0f51c7b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a95d670e99aed43f857d8ba5e6f3d7897" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref><sp/>*<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="465" refid="namespaceJSL_1a1427fd44260592b7d65d27946969fba1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1ab1f3153179f59c59a0c2a5e553889eb1" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref>)</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero<sp/>results<sp/>in<sp/>undefined<sp/>behaviour&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.0/<ref refid="structJSL_1_1NameValuePair" kindref="compound">scalar</ref><sp/>*<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="475" refid="namespaceJSL_1a6fd4487b0a8ac5713df4a37079287913" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a6fd4487b0a8ac5713df4a37079287913" kindref="member">Hadamard</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/>output.<ref refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" kindref="member">Size</ref>();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>*=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="486" refid="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" kindref="member">VectorDotProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">sum</ref><sp/>=0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Size()<sp/>!=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size())</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>take<sp/>the<sp/>dot<sp/>product<sp/>of<sp/>vectors<sp/>of<sp/>different<sp/>sizes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Size();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">sum</ref><sp/>+=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>*<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">sum</ref>;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="501" refid="namespaceJSL_1aa7816eb0cd81b74241ce460237990e70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1aa7816eb0cd81b74241ce460237990e70" kindref="member">VectorCrossProduct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">correctnElements</ref><sp/>=<sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Size()<sp/>==<sp/>3)<sp/>&amp;&amp;<sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structJSL_1_1NameValuePair" kindref="compound">correctnElements</ref>)</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>compute<sp/>the<sp/>cross<sp/>product<sp/>for<sp/>vectors<sp/>not<sp/>on<sp/>R^3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref><sp/>output(3);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[0]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[1]*<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[2]<sp/>-<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[1]*<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[2];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[1]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[2]*<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[0]<sp/>-<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[2]*<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[0];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output[2]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[0]*<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[1]<sp/>-<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>[0]*<ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>[1];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="519" refid="namespaceJSL_1a09355c91f84fd99d4634bf9189fef51d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceJSL_1a09355c91f84fd99d4634bf9189fef51d" kindref="member">AngleBetweenVectors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">aDotb</ref><sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Dot(<ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">norms</ref><sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">lhs</ref>.Norm()<sp/>*<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">rhs</ref>.Norm();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">norms</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;The<sp/>angle<sp/>between<sp/>a<sp/>vector<sp/>of<sp/>length<sp/>zero<sp/>is<sp/>undefined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">cosTheta</ref><sp/>=<sp/>std::min(1.0,<ref refid="structJSL_1_1NameValuePair" kindref="compound">aDotb</ref><sp/>/<ref refid="structJSL_1_1NameValuePair" kindref="compound">norms</ref>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">acos</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">cosTheta</ref>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="namespaceJSL_1ad01cc2984ad2ce5a85fb31960835dd04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespaceJSL_1a96050c622f5d29373cdc4a5ebb216b47" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">os</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">obj</ref>)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">os</ref><sp/>&lt;&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">obj</ref>.to_string();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">os</ref>;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="542" refid="namespaceJSL_1a941b0093a8d1298a0dc0c4403f63a826" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a941b0093a8d1298a0dc0c4403f63a826" kindref="member">ElementWiseOperation</ref>(<ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>(*<ref refid="structJSL_1_1NameValuePair" kindref="compound">function</ref>)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.Size());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.Size();++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">function</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="namespaceJSL_1a84d56be27b8b9b13e6ab8a3c61236ee3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a84d56be27b8b9b13e6ab8a3c61236ee3" kindref="member">log10</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.Size());</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>.Size();++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>=<sp/>std::log10((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<ref refid="structJSL_1_1NameValuePair" kindref="compound">input</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="namespaceJSL_1a66c1c8f6c27fe101b0731477de5535b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="namespaceJSL_1a66c1c8f6c27fe101b0731477de5535b7" kindref="member">power</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">base</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/>&amp;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">exponent</ref>)</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">exponent</ref>.Size());</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>=<sp/>0;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref><sp/>&lt;<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>.Size();<sp/>++<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">q</ref><sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">exponent</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>];</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>[<ref refid="structJSL_1_1NameValuePair" kindref="compound">i</ref>]<sp/>=<sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">pow</ref>(<ref refid="structJSL_1_1NameValuePair" kindref="compound">base</ref>,<ref refid="structJSL_1_1NameValuePair" kindref="compound">q</ref>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structJSL_1_1NameValuePair" kindref="compound">out</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h"/>
  </compounddef>
</doxygen>
