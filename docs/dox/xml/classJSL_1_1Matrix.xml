<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classJSL_1_1Matrix" kind="class" language="C++" prot="public">
    <compoundname>JSL::Matrix</compoundname>
    <includes refid="matrix_8h" local="no">matrix.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classJSL_1_1Matrix_1a446d23ba93238f3e2dfc79a3a4d5eb7e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;double&gt; &gt; JSL::Matrix::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <qualifiedname>JSL::Matrix::Data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="357" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classJSL_1_1Matrix_1a7b7a081bbf419b613f19142a634b2cfa" prot="private" static="no" mutable="no">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
        <definition>int JSL::Matrix::nRows</definition>
        <argsstring></argsstring>
        <name>nRows</name>
        <qualifiedname>JSL::Matrix::nRows</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="359" column="5" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classJSL_1_1Matrix_1aef59f1402d2137e86aebf6b21f97ee6d" prot="private" static="no" mutable="no">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
        <definition>int JSL::Matrix::nCols</definition>
        <argsstring></argsstring>
        <name>nCols</name>
        <qualifiedname>JSL::Matrix::nCols</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="360" column="5" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="360" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classJSL_1_1Matrix_1a90ddd1113043b8959b0943be24f9ad9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Matrix::Matrix</definition>
        <argsstring>(const int n, const int m)</argsstring>
        <name>Matrix</name>
        <qualifiedname>JSL::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Initialises a zero matrix of the specified size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of rows</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of columns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="20" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a1d398af495c3906cfb1b1c9b0e8978f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Matrix::Matrix</definition>
        <argsstring>(std::vector&lt; std::vector&lt; double &gt; &gt; input)</argsstring>
        <name>Matrix</name>
        <qualifiedname>JSL::Matrix::Matrix</qualifiedname>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &gt; &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Initialises a matrix from a vector-of-vectors, inferring the size as appropriate. Throws an error if the columns are not uniform size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to be copied into the matrix as <ref refid="classJSL_1_1Matrix_1a90ddd1113043b8959b0943be24f9ad9f" kindref="member">Matrix(i,j)</ref> = input[i][j] </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="26" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="26" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1ae6198f4beabaff7700265fffeb490ed7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Matrix::Matrix</definition>
        <argsstring>(const Matrix &amp;input)</argsstring>
        <name>Matrix</name>
        <qualifiedname>JSL::Matrix::Matrix</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="48" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1af784cad8dcbb502c06be62e2e328ef6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
        <definition>int JSL::Matrix::Rows</definition>
        <argsstring>() const</argsstring>
        <name>Rows</name>
        <qualifiedname>JSL::Matrix::Rows</qualifiedname>
        <briefdescription>
<para>Private access. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of rows in the matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="61" column="5" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a8aba7f9803b553df2aeae68aba3445f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
        <definition>int JSL::Matrix::Columns</definition>
        <argsstring>() const</argsstring>
        <name>Columns</name>
        <qualifiedname>JSL::Matrix::Columns</qualifiedname>
        <briefdescription>
<para>Private access. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of columns in the matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="66" column="5" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a984691eac759ff0e8f98252d07be7e1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix JSL::Matrix::Transpose</definition>
        <argsstring>()</argsstring>
        <name>Transpose</name>
        <qualifiedname>JSL::Matrix::Transpose</qualifiedname>
        <briefdescription>
<para>Returns the matrix P such that P(i,j) = Q(j,i) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The mathematical transpose of the current matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="72" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="72" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1aa8bae8650234f5e5569277563d68f22d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref></type>
        <definition>JSL::Vector JSL::Matrix::GetRow</definition>
        <argsstring>(int rowID) const</argsstring>
        <name>GetRow</name>
        <qualifiedname>JSL::Matrix::GetRow</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>rowID</declname>
        </param>
        <briefdescription>
<para>Allows vectorised access to an entire row (very quick to to contiguus storage) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowID</parametername>
</parameternamelist>
<parameterdescription>
<para>The row index to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The row, packaged as a <ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="86" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="86" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a11ea58ca43e028123f628966eb4834a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref></type>
        <definition>JSL::Vector JSL::Matrix::GetColumn</definition>
        <argsstring>(int colID) const</argsstring>
        <name>GetColumn</name>
        <qualifiedname>JSL::Matrix::GetColumn</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>colID</declname>
        </param>
        <briefdescription>
<para>Allows vectorised access to an entire column (slow due to non-contiguous storage) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>columnID</parametername>
</parameternamelist>
<parameterdescription>
<para>The column index to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The column, packaged as a <ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="98" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="98" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1ae054e5a63242a6f40e334546bdc25145" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
        <definition>double &amp; JSL::Matrix::operator()</definition>
        <argsstring>(int rowID, int columnID)</argsstring>
        <name>operator()</name>
        <qualifiedname>JSL::Matrix::operator()</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>rowID</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>columnID</declname>
        </param>
        <briefdescription>
<para>Allows access similar to [i][j], but without exposing the internal structure of the matrix to machinations. Allows modification, i.e. A(i,j) = 2 sets the value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowID</parametername>
</parameternamelist>
<parameterdescription>
<para>row coordinate of target</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columnID</parametername>
</parameternamelist>
<parameterdescription>
<para>column coordinate of target </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the data point </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="129" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="129" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1acc7c27b8630959a593a886118f90fb08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
        <definition>const double &amp; JSL::Matrix::operator()</definition>
        <argsstring>(int rowID, int columnID) const</argsstring>
        <name>operator()</name>
        <qualifiedname>JSL::Matrix::operator()</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>rowID</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>columnID</declname>
        </param>
        <briefdescription>
<para>Annoying const override of access syntax (see non-const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="141" column="15" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="141" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a6319d6f45078d0321345b4203e74217d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix JSL::Matrix::Cholesky</definition>
        <argsstring>() const</argsstring>
        <name>Cholesky</name>
        <qualifiedname>JSL::Matrix::Cholesky</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="155" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="155" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a89a5d5b76dbc28e1980167cb560a45ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; JSL::Matrix::operator+=</definition>
        <argsstring>(const Matrix &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>JSL::Matrix::operator+=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>In-place addition of two matrices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to be accumulated into the current object. Must be the same dimensions as the calling object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="181" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="181" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a196d368632d44d5262f668618fb3cefc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; JSL::Matrix::operator-=</definition>
        <argsstring>(const Matrix &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>JSL::Matrix::operator-=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>In-place subtraction of two matrices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix to be subtracted from the current object. Must be the same dimensions as the calling object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="198" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="198" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a7e4bc02f6a1b7a999ec2e404c90d40e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; JSL::Matrix::operator+=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator+=</name>
        <qualifiedname>JSL::Matrix::operator+=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place addition of a scalar onto the calling object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to be accumulated into the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="215" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="215" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a87e59f6b3a32a2b12f5a73fb4db1e5f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; JSL::Matrix::operator-=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator-=</name>
        <qualifiedname>JSL::Matrix::operator-=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place subtraction of a scalar onto the calling object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to be subtracted from the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="228" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="228" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1afba6a5e0e92aedc053fcd60428461800" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; JSL::Matrix::operator*=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator*=</name>
        <qualifiedname>JSL::Matrix::operator*=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place multiplication of a scalar onto the calling object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to be accumulated into the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="241" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="241" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1aea26657df162243cfb7f44db591fb133" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> &amp;</type>
        <definition>Matrix &amp; JSL::Matrix::operator/=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator/=</name>
        <qualifiedname>JSL::Matrix::operator/=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place division of a scalar onto the calling object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to divide the current object by. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="255" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="255" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a77d086869638fb604e6df08250decebd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>Matrix JSL::Matrix::Inverse</definition>
        <argsstring>()</argsstring>
        <name>Inverse</name>
        <qualifiedname>JSL::Matrix::Inverse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="267" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="267" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1a1c453ee6f9f17eb6e87b895459ff4306" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Matrix::Trace</definition>
        <argsstring>()</argsstring>
        <name>Trace</name>
        <qualifiedname>JSL::Matrix::Trace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="318" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="318" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Matrix_1abcf44559767ab6939851f0d3b60c6fa8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::Matrix::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <qualifiedname>JSL::Matrix::to_string</qualifiedname>
        <briefdescription>
<para>Converts the matrix to a human-readable string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string representing the object <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="330" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="330" bodyend="352"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classJSL_1_1Matrix_1afd9edd73e5f559eed02b063d4c4e47f8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref></type>
        <definition>static Matrix JSL::Matrix::Identity</definition>
        <argsstring>(int n)</argsstring>
        <name>Identity</name>
        <qualifiedname>JSL::Matrix::Identity</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>specialised psuedo-constructor for the identity matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The matrix A such that A[i][i] = 1, otherwise A[i][j] = 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="118" column="15" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="118" bodyend="126"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classJSL_1_1Matrix_1a92eb431da436e1e2922b211a9f158203" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::Matrix::outOfBoundsError</definition>
        <argsstring>(int idx1, int idx2) const</argsstring>
        <name>outOfBoundsError</name>
        <qualifiedname>JSL::Matrix::outOfBoundsError</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>idx1</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>idx2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="362" column="20" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="362" bodyend="367"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>As with <ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref>, a <ref refid="classJSL_1_1Matrix" kindref="compound">Matrix</ref> is a member of R^(m,n), and hence is a wrapper for std::vector&lt;std::vector&lt;double&gt;&gt; with various other overloaded operators. </para>
    </detaileddescription>
    <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" line="15" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/matrix.h" bodystart="16" bodyend="368"/>
    <listofallmembers>
      <member refid="classJSL_1_1Matrix_1a6319d6f45078d0321345b4203e74217d" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Cholesky</name></member>
      <member refid="classJSL_1_1Matrix_1a8aba7f9803b553df2aeae68aba3445f5" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Columns</name></member>
      <member refid="classJSL_1_1Matrix_1a446d23ba93238f3e2dfc79a3a4d5eb7e" prot="private" virt="non-virtual"><scope>JSL::Matrix</scope><name>Data</name></member>
      <member refid="classJSL_1_1Matrix_1a11ea58ca43e028123f628966eb4834a0" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>GetColumn</name></member>
      <member refid="classJSL_1_1Matrix_1aa8bae8650234f5e5569277563d68f22d" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>GetRow</name></member>
      <member refid="classJSL_1_1Matrix_1afd9edd73e5f559eed02b063d4c4e47f8" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Identity</name></member>
      <member refid="classJSL_1_1Matrix_1a77d086869638fb604e6df08250decebd" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Inverse</name></member>
      <member refid="classJSL_1_1Matrix_1a90ddd1113043b8959b0943be24f9ad9f" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Matrix</name></member>
      <member refid="classJSL_1_1Matrix_1a1d398af495c3906cfb1b1c9b0e8978f7" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Matrix</name></member>
      <member refid="classJSL_1_1Matrix_1ae6198f4beabaff7700265fffeb490ed7" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Matrix</name></member>
      <member refid="classJSL_1_1Matrix_1aef59f1402d2137e86aebf6b21f97ee6d" prot="private" virt="non-virtual"><scope>JSL::Matrix</scope><name>nCols</name></member>
      <member refid="classJSL_1_1Matrix_1a7b7a081bbf419b613f19142a634b2cfa" prot="private" virt="non-virtual"><scope>JSL::Matrix</scope><name>nRows</name></member>
      <member refid="classJSL_1_1Matrix_1ae054e5a63242a6f40e334546bdc25145" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator()</name></member>
      <member refid="classJSL_1_1Matrix_1acc7c27b8630959a593a886118f90fb08" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator()</name></member>
      <member refid="classJSL_1_1Matrix_1afba6a5e0e92aedc053fcd60428461800" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator*=</name></member>
      <member refid="classJSL_1_1Matrix_1a89a5d5b76dbc28e1980167cb560a45ff" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator+=</name></member>
      <member refid="classJSL_1_1Matrix_1a7e4bc02f6a1b7a999ec2e404c90d40e6" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator+=</name></member>
      <member refid="classJSL_1_1Matrix_1a196d368632d44d5262f668618fb3cefc" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator-=</name></member>
      <member refid="classJSL_1_1Matrix_1a87e59f6b3a32a2b12f5a73fb4db1e5f1" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator-=</name></member>
      <member refid="classJSL_1_1Matrix_1aea26657df162243cfb7f44db591fb133" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>operator/=</name></member>
      <member refid="classJSL_1_1Matrix_1a92eb431da436e1e2922b211a9f158203" prot="private" virt="non-virtual"><scope>JSL::Matrix</scope><name>outOfBoundsError</name></member>
      <member refid="classJSL_1_1Matrix_1af784cad8dcbb502c06be62e2e328ef6c" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Rows</name></member>
      <member refid="classJSL_1_1Matrix_1abcf44559767ab6939851f0d3b60c6fa8" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>to_string</name></member>
      <member refid="classJSL_1_1Matrix_1a1c453ee6f9f17eb6e87b895459ff4306" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Trace</name></member>
      <member refid="classJSL_1_1Matrix_1a984691eac759ff0e8f98252d07be7e1a" prot="public" virt="non-virtual"><scope>JSL::Matrix</scope><name>Transpose</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
