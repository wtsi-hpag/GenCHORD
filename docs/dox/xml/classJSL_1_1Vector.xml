<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classJSL_1_1Vector" kind="class" language="C++" prot="public">
    <compoundname>JSL::Vector</compoundname>
    <includes refid="vector_8h" local="no">vector.h</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classJSL_1_1Vector_1aec102ab8391080ddaedeb4605ef40c5c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &gt;</type>
        <definition>std::vector&lt;double&gt; JSL::Vector::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <qualifiedname>JSL::Vector::Data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="340" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" prot="protected" static="no" mutable="no">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
        <definition>int JSL::Vector::nElements</definition>
        <argsstring></argsstring>
        <name>nElements</name>
        <qualifiedname>JSL::Vector::nElements</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="342" column="5" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="342" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classJSL_1_1Vector_1a840fca607f8eae7dea1494b2954d3a3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Vector::Vector</definition>
        <argsstring>()</argsstring>
        <name>Vector</name>
        <qualifiedname>JSL::Vector::Vector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="26" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1aea8654ed3fb875d43f669a5f2e26fb25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Vector::Vector</definition>
        <argsstring>(int n)</argsstring>
        <name>Vector</name>
        <qualifiedname>JSL::Vector::Vector</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Initialises the vector to a state of length n, populated by zeros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the vector to be created </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="32" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1af5be93b29e1c2aab2882827d5001a2aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Vector::Vector</definition>
        <argsstring>(std::vector&lt; double &gt; input)</argsstring>
        <name>Vector</name>
        <qualifiedname>JSL::Vector::Vector</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Initialises the vector to contain the provided stl vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>An std::vector which the new <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> will envelop. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="38" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a7b07c27a73798d08b3a6271318f112c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Vector::Vector</definition>
        <argsstring>(std::vector&lt; int &gt; input)</argsstring>
        <name>Vector</name>
        <qualifiedname>JSL::Vector::Vector</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref> &gt;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Initialises the vector to contain the provided stl vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>An std::vector which the new <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> will envelop. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="43" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
        <definition>int JSL::Vector::Size</definition>
        <argsstring>() const</argsstring>
        <name>Size</name>
        <qualifiedname>JSL::Vector::Size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="47" column="5" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1afb4b68acfc19f52b5cb7514a743ccc87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Vector::Min</definition>
        <argsstring>() const</argsstring>
        <name>Min</name>
        <qualifiedname>JSL::Vector::Min</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="52" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a82f2385c1edd3fb0dafd577e32318255" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Vector::Max</definition>
        <argsstring>() const</argsstring>
        <name>Max</name>
        <qualifiedname>JSL::Vector::Max</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="56" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1afc97ae2f771605f0cc32456542a2f0d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
        <definition>double &amp; JSL::Vector::operator[]</definition>
        <argsstring>(int idx)</argsstring>
        <name>operator[]</name>
        <qualifiedname>JSL::Vector::operator[]</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Overload access operator so can call <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref>[0] etc as normal for a vector class. Performs checks on the size so that you cannot over/underflow the memory access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="61" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="61" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a57b871b70f9b894b0e5c302d1f9b71ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
        <definition>const double &amp; JSL::Vector::operator[]</definition>
        <argsstring>(int idx) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>JSL::Vector::operator[]</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Replication of non-const version (annoying) but necessary for good access.... </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="81" column="14" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="81" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a60660b5a26e0ddace46f31699834b671" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Vector::Dot</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>Dot</name>
        <qualifiedname>JSL::Vector::Dot</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Provides a member alias for <ref refid="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" kindref="member">VectorDotProduct()</ref>, with the first argument being the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second object passed to VectorDotProduct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product of rhs and the object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="101" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a59ff98a99ebcf2b589290b9e57b8e184" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::Vector::Cross</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>Cross</name>
        <qualifiedname>JSL::Vector::Cross</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Provides a member alias for <ref refid="namespaceJSL_1aa7816eb0cd81b74241ce460237990e70" kindref="member">VectorCrossProduct()</ref>, with the first argument being the current object (recall order does matter for cross products!) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second object passed to VectorDotProduct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product (this x rhs) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="107" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1ac1346e26bc981bf45d2c1c4317dac4e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Vector::SqNorm</definition>
        <argsstring>() const</argsstring>
        <name>SqNorm</name>
        <qualifiedname>JSL::Vector::SqNorm</qualifiedname>
        <briefdescription>
<para>The squared-norm of the current object, calculated using <ref refid="namespaceJSL_1a086efb36ddb107d45961a6b46932c526a7d6491e51b0151fad51114bdc9fe0006" kindref="member">Dot()</ref>. Probably not as much use as <ref refid="classJSL_1_1Vector_1aa8af717591f5548ff471b6e4b28d7f9c" kindref="member">Norm()</ref>, but saves time sqrting and then squaring again! </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>this.Dot(this) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="113" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a3d758f7808e2aaeb21a123661b10a899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref></type>
        <definition>JSL::Vector JSL::Vector::PointwiseDivide</definition>
        <argsstring>(JSL::Vector dividor)</argsstring>
        <name>PointwiseDivide</name>
        <qualifiedname>JSL::Vector::PointwiseDivide</qualifiedname>
        <param>
          <type><ref refid="classJSL_1_1Vector" kindref="compound">JSL::Vector</ref></type>
          <declname>dividor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="118" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="118" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1afa9b72648ed64547eefdc1dca2f8e038" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Vector::Sum</definition>
        <argsstring>() const</argsstring>
        <name>Sum</name>
        <qualifiedname>JSL::Vector::Sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="130" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="130" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1aa8af717591f5548ff471b6e4b28d7f9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Vector::Norm</definition>
        <argsstring>() const</argsstring>
        <name>Norm</name>
        <qualifiedname>JSL::Vector::Norm</qualifiedname>
        <briefdescription>
<para>The norm of the current object,. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The square-root of the <ref refid="classJSL_1_1Vector_1ac1346e26bc981bf45d2c1c4317dac4e6" kindref="member">SqNorm()</ref> function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="140" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a0529640bc02ce994026184d93f43f9c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
        <definition>double JSL::Vector::AngleBetween</definition>
        <argsstring>(const Vector &amp;rhs) const</argsstring>
        <name>AngleBetween</name>
        <qualifiedname>JSL::Vector::AngleBetween</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>A member-alias for <ref refid="namespaceJSL_1a09355c91f84fd99d4634bf9189fef51d" kindref="member">AngleBetweenVectors()</ref>, with the first argument being the current object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second object passed to <ref refid="namespaceJSL_1a09355c91f84fd99d4634bf9189fef51d" kindref="member">AngleBetweenVectors()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The angle between this object and the provided vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="146" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a73579b4a194cc924341806a5d9ea3817" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::Vector::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <qualifiedname>JSL::Vector::to_string</qualifiedname>
        <briefdescription>
<para>Converts the vector into a human-readable string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A representation of the vector, such as (1,4.5,3) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="152" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1ad2d0bfdb432809a88a49f4576b0afb5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::Vector::to_simple_string</definition>
        <argsstring>() const</argsstring>
        <name>to_simple_string</name>
        <qualifiedname>JSL::Vector::to_simple_string</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="156" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="156" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a91d4cf29c2865069520d03292844d84f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::Vector::to_string_precision</definition>
        <argsstring>(const int n) const</argsstring>
        <name>to_string_precision</name>
        <qualifiedname>JSL::Vector::to_string_precision</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="169" column="13" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="169" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a41023e6371572e76196b44553b48215c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Vector::operator std::vector&lt; double &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator std::vector&lt; double &gt;</name>
        <qualifiedname>JSL::Vector::vector&lt; double &gt;</qualifiedname>
        <briefdescription>
<para>Implicit conversion back to std::vector&lt;double&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="185" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a284efd325068f5c75fd8d627325f01b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>JSL::Vector::operator std::vector&lt; int &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator std::vector&lt; int &gt;</name>
        <qualifiedname>JSL::Vector::vector&lt; int &gt;</qualifiedname>
        <briefdescription>
<para>Implicit conversion back to std::vector&lt;int&gt; </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="190" column="8" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1ab0c81c187542077c13839a07cfc77d89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; JSL::Vector::operator+=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator+=</name>
        <qualifiedname>JSL::Vector::operator+=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>In-place addition of two vectors. Calls <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> <ref refid="namespaceJSL_1ae6530b77174d0dfae8e0d6e2a810f672" kindref="member">operator+(const Vector &amp; lhs, const Vector &amp; rhs)</ref> using this object as lhs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be accumulated into the current object. Must be the same nElements as the calling object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="196" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="196" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a492901b0924e8055144af4c5e5b99ebf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; JSL::Vector::operator-=</definition>
        <argsstring>(const Vector &amp;rhs)</argsstring>
        <name>operator-=</name>
        <qualifiedname>JSL::Vector::operator-=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>In-place subtraction of two vectors. Calls <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> <ref refid="namespaceJSL_1a1d8393f2865dc23e7975ad041e341ba5" kindref="member">operator-(const Vector &amp; lhs, const Vector &amp; rhs)</ref> using this object as lhs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be subtracted from the current object. Must be the same nElements as the calling object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="209" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="209" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a56d1795d754957311d22303c397174c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; JSL::Vector::operator+=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator+=</name>
        <qualifiedname>JSL::Vector::operator+=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place addition of a scalar onto the callign object. Calls <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> <ref refid="namespaceJSL_1a4b293e2ac3df51113e80022cb3c2ac99" kindref="member">operator+(const Vector &amp; lhs, const double &amp; scalar)</ref> using this object as lhs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to be accumulated into the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="223" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a953e5c39a0036ed7507a64c1810b65e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; JSL::Vector::operator-=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator-=</name>
        <qualifiedname>JSL::Vector::operator-=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place subtraction of a scalar onto the callign object. Calls <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> <ref refid="namespaceJSL_1ac6bd9311dd73aa6227d826bdb94e748d" kindref="member">operator-(const Vector &amp; lhs, const double &amp; scalar)</ref> using this object as lhs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to be subtracted from the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="233" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="233" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a3d7bee6bfd0624c8bebf63a1c7c3309b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; JSL::Vector::operator*=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator*=</name>
        <qualifiedname>JSL::Vector::operator*=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place multiplication of a scalar with the calling object. Calls <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> <ref refid="namespaceJSL_1afc5e092de4a9bdc5795d40ee0f51c7b9" kindref="member">operator*(const Vector &amp; lhs, const double &amp; scalar)</ref> using this object as lhs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to be accumulated into the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="243" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1acc5dec41ebc9cfc77a2b4be5eab07392" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
        <definition>Vector &amp; JSL::Vector::operator/=</definition>
        <argsstring>(const double &amp;scalar)</argsstring>
        <name>operator/=</name>
        <qualifiedname>JSL::Vector::operator/=</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">const</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>In-place division of the calling object with a scalar. Calls <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> <ref refid="namespaceJSL_1a1427fd44260592b7d65d27946969fba1" kindref="member">operator/(const Vector &amp; lhs, const double &amp; scalar)</ref> using this object as lhs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The double to be accumulated into the current object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the now-modified calling object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="253" column="9" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="253" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">bool</ref></type>
        <definition>bool JSL::Vector::isnan</definition>
        <argsstring>()</argsstring>
        <name>isnan</name>
        <qualifiedname>JSL::Vector::isnan</qualifiedname>
        <briefdescription>
<para>Reports true if any members are NaN. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="263" column="6" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="263" bodyend="271"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classJSL_1_1Vector_1a89f7ded3248861aa9ba4b715ef5eab6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>static Vector JSL::Vector::zeros</definition>
        <argsstring>(unsigned int size)</argsstring>
        <name>zeros</name>
        <qualifiedname>JSL::Vector::zeros</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">unsigned</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="273" column="22" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="273" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1abc4fbd2797c05d7bba859e5a8c435711" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>static Vector JSL::Vector::RandVec</definition>
        <argsstring>(unsigned int size, double lowerBound, double upperBound)</argsstring>
        <name>RandVec</name>
        <qualifiedname>JSL::Vector::RandVec</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">unsigned</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
          <declname>lowerBound</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
          <declname>upperBound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="277" column="22" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="277" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a46fc3e1d5ee9bdb66844aa5e2e5112e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>static Vector JSL::Vector::linspace</definition>
        <argsstring>(double start, double end, unsigned int length)</argsstring>
        <name>linspace</name>
        <qualifiedname>JSL::Vector::linspace</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">double</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">unsigned</ref> <ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Constructs a vector of specified length with start and end points (inclusive) given by the user, with the intervening points linearly spaced apart. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The first element of the returned array</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The final element of the array (included in the range!)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the returned array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector (start, start + x,start + 2x, .... end) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="289" column="15" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="289" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1a4ca666ae14cef413dcf3679a10a7fbb9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>static Vector JSL::Vector::intspace</definition>
        <argsstring>(int start, int end, int step)</argsstring>
        <name>intspace</name>
        <qualifiedname>JSL::Vector::intspace</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Similar to <ref refid="classJSL_1_1Vector_1a46fc3e1d5ee9bdb66844aa5e2e5112e9" kindref="member">linspace()</ref>, but for integer values. Note that the step is specified here, not the length. It is possible that end is not included in the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>The first element of the returned array</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum possible value for the final element in the array</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>The (integer) distance between each successive element in the array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector, starting at #start, increasing by #step each time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="302" column="15" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="302" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1abf5562ae67edb5273b8dc5b419956825" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>static Vector JSL::Vector::logintspace</definition>
        <argsstring>(int start, int end, int size)</argsstring>
        <name>logintspace</name>
        <qualifiedname>JSL::Vector::logintspace</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="317" column="15" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="317" bodyend="338"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classJSL_1_1Vector_1ac41d3cb075c2bd871c31b96dedba08fe" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::Vector::negativeIntegerError</definition>
        <argsstring>(int idx) const</argsstring>
        <name>negativeIntegerError</name>
        <qualifiedname>JSL::Vector::negativeIntegerError</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="343" column="20" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classJSL_1_1Vector_1ab081a68e1fc526f4bf866de0ba61a09b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::Vector::outOfBoundsError</definition>
        <argsstring>(int idx) const</argsstring>
        <name>outOfBoundsError</name>
        <qualifiedname>JSL::Vector::outOfBoundsError</qualifiedname>
        <param>
          <type><ref refid="structJSL_1_1NameValuePair" kindref="compound">int</ref></type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="347" column="20" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="347" bodyend="350"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A class implementing basic R^n vector mathematics. Mostly acts as an extention to the basic std::vector object, but with the implicit assumption that the objects should behave like members of a true vector space, can unambiguously overload some operators and add in additional functionality. </para>
    </detaileddescription>
    <location file="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" line="22" column="1" bodyfile="/Users/jf20/Documents/Genomics/Deforest/libs/JSL/Maths/vector.h" bodystart="23" bodyend="351"/>
    <listofallmembers>
      <member refid="classJSL_1_1Vector_1a0529640bc02ce994026184d93f43f9c3" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>AngleBetween</name></member>
      <member refid="classJSL_1_1Vector_1a59ff98a99ebcf2b589290b9e57b8e184" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Cross</name></member>
      <member refid="classJSL_1_1Vector_1aec102ab8391080ddaedeb4605ef40c5c" prot="protected" virt="non-virtual"><scope>JSL::Vector</scope><name>Data</name></member>
      <member refid="classJSL_1_1Vector_1a60660b5a26e0ddace46f31699834b671" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Dot</name></member>
      <member refid="classJSL_1_1Vector_1a4ca666ae14cef413dcf3679a10a7fbb9" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>intspace</name></member>
      <member refid="classJSL_1_1Vector_1ad7dc3af5e90b59e3ba2efc458e192a4c" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>isnan</name></member>
      <member refid="classJSL_1_1Vector_1a46fc3e1d5ee9bdb66844aa5e2e5112e9" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>linspace</name></member>
      <member refid="classJSL_1_1Vector_1abf5562ae67edb5273b8dc5b419956825" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>logintspace</name></member>
      <member refid="classJSL_1_1Vector_1a82f2385c1edd3fb0dafd577e32318255" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Max</name></member>
      <member refid="classJSL_1_1Vector_1afb4b68acfc19f52b5cb7514a743ccc87" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Min</name></member>
      <member refid="classJSL_1_1Vector_1ac41d3cb075c2bd871c31b96dedba08fe" prot="protected" virt="non-virtual"><scope>JSL::Vector</scope><name>negativeIntegerError</name></member>
      <member refid="classJSL_1_1Vector_1a84eb32f5917a770c895e106834a6c05d" prot="protected" virt="non-virtual"><scope>JSL::Vector</scope><name>nElements</name></member>
      <member refid="classJSL_1_1Vector_1aa8af717591f5548ff471b6e4b28d7f9c" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Norm</name></member>
      <member refid="classJSL_1_1Vector_1a41023e6371572e76196b44553b48215c" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator std::vector&lt; double &gt;</name></member>
      <member refid="classJSL_1_1Vector_1a284efd325068f5c75fd8d627325f01b3" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator std::vector&lt; int &gt;</name></member>
      <member refid="classJSL_1_1Vector_1a3d7bee6bfd0624c8bebf63a1c7c3309b" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator*=</name></member>
      <member refid="classJSL_1_1Vector_1ab0c81c187542077c13839a07cfc77d89" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator+=</name></member>
      <member refid="classJSL_1_1Vector_1a56d1795d754957311d22303c397174c1" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator+=</name></member>
      <member refid="classJSL_1_1Vector_1a492901b0924e8055144af4c5e5b99ebf" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator-=</name></member>
      <member refid="classJSL_1_1Vector_1a953e5c39a0036ed7507a64c1810b65e6" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator-=</name></member>
      <member refid="classJSL_1_1Vector_1acc5dec41ebc9cfc77a2b4be5eab07392" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator/=</name></member>
      <member refid="classJSL_1_1Vector_1afc97ae2f771605f0cc32456542a2f0d5" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator[]</name></member>
      <member refid="classJSL_1_1Vector_1a57b871b70f9b894b0e5c302d1f9b71ad" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>operator[]</name></member>
      <member refid="classJSL_1_1Vector_1ab081a68e1fc526f4bf866de0ba61a09b" prot="protected" virt="non-virtual"><scope>JSL::Vector</scope><name>outOfBoundsError</name></member>
      <member refid="classJSL_1_1Vector_1a3d758f7808e2aaeb21a123661b10a899" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>PointwiseDivide</name></member>
      <member refid="classJSL_1_1Vector_1abc4fbd2797c05d7bba859e5a8c435711" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>RandVec</name></member>
      <member refid="classJSL_1_1Vector_1a53b26ca32061ebf41430fe2322f79c0c" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Size</name></member>
      <member refid="classJSL_1_1Vector_1ac1346e26bc981bf45d2c1c4317dac4e6" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>SqNorm</name></member>
      <member refid="classJSL_1_1Vector_1afa9b72648ed64547eefdc1dca2f8e038" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Sum</name></member>
      <member refid="classJSL_1_1Vector_1ad2d0bfdb432809a88a49f4576b0afb5a" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>to_simple_string</name></member>
      <member refid="classJSL_1_1Vector_1a73579b4a194cc924341806a5d9ea3817" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>to_string</name></member>
      <member refid="classJSL_1_1Vector_1a91d4cf29c2865069520d03292844d84f" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>to_string_precision</name></member>
      <member refid="classJSL_1_1Vector_1a840fca607f8eae7dea1494b2954d3a3c" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Vector</name></member>
      <member refid="classJSL_1_1Vector_1aea8654ed3fb875d43f669a5f2e26fb25" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Vector</name></member>
      <member refid="classJSL_1_1Vector_1af5be93b29e1c2aab2882827d5001a2aa" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Vector</name></member>
      <member refid="classJSL_1_1Vector_1a7b07c27a73798d08b3a6271318f112c0" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>Vector</name></member>
      <member refid="classJSL_1_1Vector_1a89f7ded3248861aa9ba4b715ef5eab6b" prot="public" virt="non-virtual"><scope>JSL::Vector</scope><name>zeros</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
